import datetime
import utils.parser_schedule as ps
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from keyboards import kb_client
from utils import sqlite_db


async def command_start(msg: types.message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä –ö–æ–ª–ª–µ–¥–∂–∞ —Å–≤—è–∑–∏", reply_markup=kb_client)


async def command_schedule_week(msg: types.message):
    group_name = await sqlite_db.get_group_name(msg.chat.id)
    url = ps.get_link_schedule_group(group_name)
    if url is None:
        await msg.answer(f'–ì—Ä—É–ø–ø—ã: {group_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return
    lessons = ps.get_lessons_week(url)

    answer = f'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n'
    for i in lessons:
        answer += f'–î–∞—Ç–∞:{i.date}\n'
        answer += f'–ù–æ–º–µ—Ä:{i.number}\n'
        answer += f'–í—Ä–µ–º—è:{i.time}\n'
        answer += f'–¢–∏–ø:{i.way}\n'
        answer += f'–ü–∞—Ä–∞:{i.content}\n'
        answer += f'-------\n'
    await msg.answer(answer)


async def command_schedule_tomorrow(msg: types.message):
    group_name = await sqlite_db.get_group_name(msg.chat.id)
    url = ps.get_link_schedule_group(group_name)
    if url is None:
        await msg.answer(f'–ì—Ä—É–ø–ø—ã: {group_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return
    lessons = ps.get_lessons(url)
    today = datetime.date.today()
    tomorrow = (today + datetime.timedelta(days=1)).strftime('%d.%m.%Y')

    answer = f'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: \n'
    for i in lessons:
        if i.date == tomorrow:
            answer += (f'–î–∞—Ç–∞:{i.date}\n')
            answer += (f'–ù–æ–º–µ—Ä:{i.number}\n')
            answer += (f'–í—Ä–µ–º—è:{i.time}\n')
            answer += (f'–¢–∏–ø:{i.way}\n')
            answer += (f'–ü–∞—Ä–∞:{i.content}\n')
            answer += (f'--------\n')
    if answer == f'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: \n':
        answer += f'–ó–∞–≤—Ç—Ä–∞ –Ω–µ—Ç—É –ø–∞—Ä'
    await msg.answer(answer)


async def command_schedule_today(msg: types.message):
    group_name = await sqlite_db.get_group_name(msg.chat.id)
    url = ps.get_link_schedule_group(group_name)
    if url is None:
        await msg.answer(f'–ì—Ä—É–ø–ø—ã: {group_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return
    lessons = ps.get_lessons(url)
    today = datetime.date.today()
    tomorrow = today.strftime('%d.%m.%Y')

    answer = f'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: \n'
    for i in lessons:
        if i.date == tomorrow:
            answer += (f'–î–∞—Ç–∞:{i.date}\n')
            answer += (f'–ù–æ–º–µ—Ä:{i.number}\n')
            answer += (f'–í—Ä–µ–º—è:{i.time}\n')
            answer += (f'–¢–∏–ø:{i.way}\n')
            answer += (f'–ü–∞—Ä–∞:{i.content}\n')
            answer += (f'--------\n')
    if answer == f'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: \n':
        answer += f'–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç—É –ø–∞—Ä'
    await msg.answer(answer)


class FSMClient(StatesGroup):
    group = State()


async def command_change_group(msg: types.message):
    await FSMClient.group.set()
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã(–∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ):')


async def change_group(msg: types.message, state: FSMContext):
    async with state.proxy() as data:
        data['group'] = msg
    await sqlite_db.change_group_name(msg.chat.id, msg.text)
    await state.finish()
    await msg.reply(f"–ò–º—è –≥—Ä—É–ø–ø—ã '{msg.text}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

async def command_profile(msg: types.message):
    group_name = await sqlite_db.get_group_name(msg.chat.id)
    id = await sqlite_db.get_id(msg.chat.id)
    await msg.reply(f'–ü—Ä–æ—Ñ–∏–ª—å\n'
                    f'ID: {id}\n'
                    f'–ì—Ä—É–ø–ø–∞: {group_name}')

def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands='start')
    dp.register_message_handler(command_profile, Text(equals='üë§–ü—Ä–æ—Ñ–∏–ª—åüë§', ignore_case=True))
    dp.register_message_handler(command_schedule_today, Text(equals='üóì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—èüóì', ignore_case=True))
    dp.register_message_handler(command_schedule_tomorrow, Text(equals='üóì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞üóì', ignore_case=True))
    dp.register_message_handler(command_schedule_week, Text(equals='üóì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—éüóì', ignore_case=True))
    dp.register_message_handler(command_change_group, Text(equals='‚úèÔ∏è–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É‚úèÔ∏è', ignore_case=True))
    dp.register_message_handler(change_group, state=FSMClient.group)
